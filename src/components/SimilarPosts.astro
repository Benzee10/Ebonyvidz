---
import type { SimilarPost } from "@utils/similar-posts";
import { getPostUrlBySlug } from "@utils/url-utils";
import { Icon } from "astro-icon/components";

interface Props {
  similarPosts: any[];
  class?: string;
}

const { similarPosts, class: className } = Astro.props;
---

{similarPosts && similarPosts.length > 0 && (
  <div class:list={["similar-posts-container", className]}>
    <h2 class="text-xl font-bold mb-4 text-white">Related Videos</h2>
    <div class="video-grid">
      {similarPosts.map((post) => (
        <a href={`/posts/${post.slug}/`} class="video-item group">
          <div class="video-thumbnail relative">
            <img
              src={post.data.image}
              alt={post.data.title}
              class="w-full h-full object-cover rounded-md"
              loading="lazy"
            />
            {post.data.duration && (
              <span class="duration-badge absolute bottom-2 right-2 bg-black/80 text-white text-xs px-2 py-1 rounded">
                {post.data.duration}
              </span>
            )}
            <div class="overlay absolute inset-0 bg-black/20 opacity-0 group-hover:opacity-100 transition-opacity duration-200 rounded-md flex items-center justify-center">
              <svg class="w-8 h-8 text-white" fill="currentColor" viewBox="0 0 24 24">
                <path d="M8 5v14l11-7z"/>
              </svg>
            </div>
          </div>
          <div class="video-info mt-2">
            <h3 class="video-title text-white text-sm font-medium line-clamp-2 group-hover:text-purple-400 transition-colors">
              {post.data.title}
            </h3>
            <div class="video-meta flex items-center gap-2 mt-1 text-xs text-gray-400">
              {post.data.tags && post.data.tags.slice(0, 2).map((tag: string) => (
                <span class="tag bg-red-600 text-white px-2 py-1 rounded text-xs font-medium">
                  {tag}
                </span>
              ))}
            </div>
          </div>
        </a>
      ))}
    </div>
  </div>
)}

<style>
.similar-posts-container {
  background: #1a1a1a;
  padding: 1.5rem;
  border-radius: 8px;
  margin: 2rem 0;
}

.video-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
  gap: 1rem;
}

@media (max-width: 640px) {
  .video-grid {
    grid-template-columns: repeat(2, 1fr);
    gap: 0.75rem;
  }
}

@media (min-width: 640px) and (max-width: 1024px) {
  .video-grid {
    grid-template-columns: repeat(3, 1fr);
  }
}

@media (min-width: 1024px) {
  .video-grid {
    grid-template-columns: repeat(4, 1fr);
  }
}

.video-item {
  display: block;
  text-decoration: none;
  transition: transform 0.2s ease;
}

.video-item:hover {
  transform: translateY(-2px);
}

.video-thumbnail {
  aspect-ratio: 16/9;
  overflow: hidden;
  border-radius: 6px;
  background: #2a2a2a;
}

.video-title {
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
  overflow: hidden;
  line-height: 1.3;
}

.tag {
  font-size: 0.65rem;
  font-weight: 600;
  text-transform: uppercase;
}

.duration-badge {
  font-size: 0.7rem;
  font-weight: 600;
}
</style>