---
import type { CollectionEntry } from "astro:content";
import path from "node:path";
import { Icon } from "astro-icon/components";
import I18nKey from "../i18n/i18nKey";
import { i18n } from "../i18n/translation";
import { getDir } from "../utils/url-utils";
import ImageWrapper from "./misc/ImageWrapper.astro";
import PostMetadata from "./PostMeta.astro";

interface Props {
	class?: string;
	entry: CollectionEntry<"posts">;
	title: string;
	url: string;
	published: Date;
	updated?: Date;
	tags: string[];
	category: string | null;
	image: string;
	description: string;
	draft: boolean;
	style: string;
}
const {
	entry,
	title,
	url,
	published,
	updated,
	tags,
	category,
	image,
	description,
	style,
} = Astro.props;
const className = Astro.props.class;

const hasCover = image !== undefined && image !== null && image !== "";

const coverWidth = "28%";

const { remarkPluginFrontmatter } = await entry.render();
---
<div class:list={["video-card bg-[var(--card-bg)] rounded-lg overflow-hidden group cursor-pointer transition-all duration-300 hover:shadow-xl hover:transform hover:-translate-y-2", className]} style={style}>
    <a href={url} class="block">
        <!-- Video Thumbnail -->
        <div class="relative aspect-video overflow-hidden bg-black">
            {hasCover ? (
                <ImageWrapper 
                    src={image} 
                    basePath={path.join("content/posts/", getDir(entry.id))} 
                    alt="Video Thumbnail"
                    class="w-full h-full object-cover transition-transform duration-300 group-hover:scale-105"
                />
            ) : (
                <div class="w-full h-full bg-gradient-to-br from-[var(--primary)] to-[var(--primary-darker)] flex items-center justify-center">
                    <svg class="w-16 h-16 text-white opacity-60" fill="currentColor" viewBox="0 0 24 24">
                        <path d="M8 5v14l11-7z"/>
                    </svg>
                </div>
            )}
            
            <!-- Duration Badge -->
            {entry.data.duration && (
                <div class="absolute bottom-2 right-2 bg-black/80 text-white px-2 py-1 rounded text-xs font-semibold">
                    {entry.data.duration}
                </div>
            )}
            
            <!-- Play Button Overlay -->
            <div class="absolute inset-0 bg-black/20 opacity-0 group-hover:opacity-100 transition-opacity duration-300 flex items-center justify-center">
                <div class="w-16 h-16 bg-white/90 rounded-full flex items-center justify-center">
                    <svg class="w-6 h-6 text-black ml-1" fill="currentColor" viewBox="0 0 24 24">
                        <path d="M8 5v14l11-7z"/>
                    </svg>
                </div>
            </div>
        </div>
        
        <!-- Video Info -->
        <div class="p-4">
            <h3 class="text-[var(--primary-text)] font-semibold text-sm md:text-base line-clamp-2 leading-tight mb-2">
                {title}
            </h3>
            <div class="flex flex-col gap-1 text-xs text-[var(--secondary-text)]">
                <div class="flex items-center gap-2">
                    <span>üëÅÔ∏è Views</span>
                    {entry.data.category && (
                        <span class="text-[var(--primary)]">‚Ä¢ {entry.data.category}</span>
                    )}
                </div>
                {tags.length > 0 && (
                    <div class="flex flex-wrap gap-1">
                        {tags.slice(0, 3).map(tag => (
                            <span class="bg-[var(--primary)]/10 text-[var(--primary)] px-2 py-0.5 rounded text-xs">
                                #{tag}
                            </span>
                        ))}
                    </div>
                )}
            </div>
        </div>
    </a>
</div></old_str>
<div class="transition border-t-[1px] border-dashed mx-6 border-black/10 dark:border-white/[0.15] last:border-t-0 md:hidden"></div>

<style define:vars={{coverWidth}}>
</style>