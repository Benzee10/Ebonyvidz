---
interface Props {
  videoUrl?: string;
  thumbnail?: string;
  title?: string;
  duration?: string;
  class?: string;
}

const { videoUrl, thumbnail, title, duration, class: className } = Astro.props;

// Convert HTTP to HTTPS for security
const secureVideoUrl = videoUrl?.replace(/^http:\/\//i, 'https://');
---

{secureVideoUrl && (
  <div class:list={["video-player-wrapper", className]}>
    <div class="video-container">
      {secureVideoUrl.includes('xvideos.com/embedframe/') ? (
        <!-- Handle XVideos embed URLs -->
        <iframe
          src={secureVideoUrl}
          frameborder="0"
          width="100%"
          scrolling="no"
          allowfullscreen
          allow="autoplay; fullscreen; encrypted-media"
          class="video-iframe"
          loading="lazy"
          sandbox="allow-scripts allow-same-origin allow-presentation"
        ></iframe>
      ) : secureVideoUrl.includes('leaktube.org') ? (
        <!-- Handle Leaktube URLs -->
        <video 
          controls 
          poster={thumbnail}
          preload="metadata"
          class="video-player"
          playsinline
          controlslist="nodownload"
        >
          <source src={secureVideoUrl} type="video/mp4">
          Your browser does not support the video tag.
        </video>
      ) : secureVideoUrl.includes('.mp4') || secureVideoUrl.includes('.webm') || secureVideoUrl.includes('.ogg') ? (
        <!-- Handle direct video URLs -->
        <video 
          controls 
          poster={thumbnail}
          preload="metadata"
          class="video-player"
          playsinline
          controlslist="nodownload"
        >
          <source src={secureVideoUrl} type="video/mp4">
          {secureVideoUrl.includes('.mp4') && <source src={secureVideoUrl.replace('.mp4', '.webm')} type="video/webm">}
          {secureVideoUrl.includes('.mp4') && <source src={secureVideoUrl.replace('.mp4', '.ogg')} type="video/ogg">}
          Your browser does not support the video tag.
        </video>
      ) : (
        <!-- Fallback for other embed URLs -->
        <iframe
          src={secureVideoUrl}
          frameborder="0"
          width="100%"
          scrolling="no"
          allowfullscreen
          allow="autoplay; fullscreen; encrypted-media"
          class="video-iframe"
          loading="lazy"
          sandbox="allow-scripts allow-same-origin allow-presentation"
        ></iframe>
      )}

    </div>
  </div>
)}

<style>
  .video-player-wrapper {
    margin: 2rem auto;
    max-width: 900px;
    width: 100%;
    position: relative;
    z-index: 100;
    isolation: isolate;
  }

  .video-container {
    position: relative;
    width: 100%;
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
    background: #000;
    aspect-ratio: 16/9;
    z-index: 100;
  }

  .video-player {
    width: 100%;
    height: 100%;
    display: block;
    border-radius: 12px;
    object-fit: contain;
    background: #000;
    z-index: 100;
  }

  .video-iframe {
    width: 100%;
    height: 100%;
    border: none;
    border-radius: 12px;
    background: #000;
    z-index: 100;
  }


  /* Hide download button in webkit browsers */
  .video-player::-webkit-media-controls-download-button {
    display: none;
  }

  .video-player::-webkit-media-controls-enclosure {
    overflow: hidden;
  }

  .video-player::-webkit-media-controls {
    overflow: hidden;
  }

  /* Prevent context menu on video */
  .video-player {
    -webkit-touch-callout: none;
    -webkit-user-select: none;
    -khtml-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
  }

  /* Error state styling */
  .video-player:error {
    background: #1a1a1a;
    color: #fff;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .video-player:error::after {
    content: "Video unavailable";
    font-size: 1rem;
    color: #999;
  }

  .video-player::-webkit-media-controls-panel {
    background-color: rgba(0, 0, 0, 0.8);
  }

  /* Ensure no overlays interfere with video */
  .video-player-wrapper .banner-ad,
  .video-player-wrapper .cta-overlay,
  .video-section .banner-ad,
  .video-section .cta-overlay {
    display: none !important;
    visibility: hidden !important;
    opacity: 0 !important;
  }

  /* Responsive design */
  @media (max-width: 768px) {
    .video-player-wrapper {
      margin: 1.5rem auto;
      max-width: 100%;
      padding: 0 1rem;
    }

    .video-container {
      border-radius: 8px;
      max-height: 60vh;
      aspect-ratio: 16/9;
    }

    .video-iframe,
    .video-player {
      max-height: 60vh;
      object-fit: contain;
    }

  }

  @media (max-width: 480px) {
    .video-player-wrapper {
      margin: 1rem auto;
      padding: 0 0.5rem;
    }

    .video-container {
      border-radius: 6px;
      max-height: 50vh;
      aspect-ratio: 16/9;
    }

    .video-iframe,
    .video-player {
      max-height: 50vh;
      object-fit: contain;
    }

  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const videos = document.querySelectorAll('.video-player');
    const iframes = document.querySelectorAll('.video-iframe');

    videos.forEach(video => {
      video.addEventListener('error', function(e) {
        console.warn('Video loading error:', e);
        const container = video.closest('.video-container');
        if (container) {
          container.innerHTML = `
            <div class="video-error" style="display: flex; align-items: center; justify-content: center; height: 100%; background: #1a1a1a; color: #999; border-radius: 12px;">
              <div class="text-center">
                <p style="margin-bottom: 1rem;">Video currently unavailable</p>
                <p style="font-size: 0.875rem; opacity: 0.7;">Please try again later</p>
              </div>
            </div>
          `;
        }
      });

      // Attempt to reload video if it fails
      video.addEventListener('loadstart', function() {
        video.style.opacity = '1';
      });
    });

    // Handle iframe load errors
    iframes.forEach(iframe => {
      iframe.addEventListener('error', function(e) {
        console.warn('Iframe loading error:', e);
      });
    });
  });
</script>